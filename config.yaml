# CadEval Configuration

# --- New Prompts Section --- Start ---
prompts:
  default: |
    Create a valid OpenSCAD script that models the following 3D object, described below: {description}

    IMPORTANT: Create only a SINGLE part/model in this script. Do not include multiple unconnected components.

    Reminders:
    - Ensure the model is manifold and watertight
    - Use appropriate operations as needed
    - Define the model at the origin (0,0,0)
    - Include helpful comments in your code
    - Do not include example usage or test code
    - Do not include explanations outside of code comments
  concise: |
    Generate OpenSCAD for the following 3D object: {description}
  cursor-gen: |  # Use '|' for multi-line strings in YAML
        You are an expert OpenSCAD programmer. Your task is to generate precise and correct OpenSCAD code based *only* on the provided task description, descirbed below: {description}

        Please adhere strictly to the following guidelines:
        1.  **Output Format:** Generate *only* valid OpenSCAD code. Do not include any explanations, comments outside the code, or introductory/concluding remarks. The output must be directly executable by OpenSCAD.
        2.  **Requirements:** Carefully read and implement *all* requirements specified in the task description, including dimensions, shapes, positions, and relationships between components. Pay close attention to units (assume mm unless otherwise stated).
        3.  **Clarity:** Use meaningful variable names where appropriate to enhance code readability.
        4.  **Structure:** If the design involves multiple distinct parts or repeated elements, consider using OpenSCAD modules for better organization, but prioritize fulfilling the core requirements accurately.
        5.  **Completeness:** Ensure the final output represents the complete object described in the task. Do not omit any required features.

        Generate the OpenSCAD code now based on the task description provided next.
  deepresearch-gen: |
        You are an expert 3D CAD assistant specialized in OpenSCAD. Always produce valid OpenSCAD code that strictly follows the user's description, using only standard OpenSCAD functions and syntax (no other CAD languages or external libraries).

        Carefully plan the construction of the object before writing code. Break the description into components: identify each required primitive shape, its dimensions, and how they combine (union, difference, etc.). Ensure this plan satisfies all constraints, then generate the final OpenSCAD code without explaining the plan.

        Adhere strictly to all given dimensions and geometric constraints. Use the exact values provided for lengths, angles, radii, etc., and ensure the code fulfills every specified requirement (e.g. alignments, equal spacing, required symmetries). Double-check that each constraint is satisfied in the final code

        Use appropriate boolean operations to construct the model as a single connected piece. For example, use union() to join separate parts, and difference() to cut holes or remove material as described. Ensure no part remains unconnected or floatingâ€”every feature should attach correctly to the rest of the model.

        Place and orient each shape with care. Use the coordinate origin and axes as reference points for alignment. If a feature must be centered or aligned to an edge, calculate the translation or use center=true to position it exactly. Maintain consistent orientation (X, Y, Z) for all parts as described

        Only include the shapes and operations explicitly described in the input. Do not invent additional features, decorative elements, or changes to dimensions beyond the given description. Stay focused on exactly what is requested

        Here's the description of the 3D object to model: {description}

# --- New Prompts Section --- End ---

openscad:
  executable_path: /Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD
  minimum_version: '2021.01'
  render_timeout_seconds: 120
  export_format: asciistl
  backend: Manifold
  summary_options: all
directories:
  tasks: ./tasks
  reference: ./reference
  generated_outputs: ./generated_outputs
  results: ./results
  output: ./generated_outputs
llm:
  models:
  - name: claude-3-7-sonnet-20250219
    provider: anthropic
    temperature: 1.0
    max_tokens: 15000 # Note: This might be overridden by the 128k context from beta
    cost_per_million_input_tokens: 3.0 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 15.0 # Placeholder cost ($/Million Tokens)
    anthropic_extended_thinking_enabled: true
    anthropic_thinking_budget_tokens: 2500
    anthropic_betas: ["output-128k-2025-02-19"]
  - name: claude-3-5-sonnet-20241022
    provider: anthropic
    temperature: 0.4
    max_tokens: 8000
    cost_per_million_input_tokens: 3.0 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 15.0 # Placeholder cost ($/Million Tokens)
  - name: claude-3-5-haiku-20241022
    provider: anthropic
    temperature: 0.4
    max_tokens: 8000
    cost_per_million_input_tokens: 0.80 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 4.0 # Placeholder cost ($/Million Tokens)
  - name: claude-3-haiku-20240307
    provider: anthropic
    temperature: 0.4
    max_tokens: 4000
    cost_per_million_input_tokens: 0.25 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 1.25 # Placeholder cost ($/Million Tokens)
  - name: o3-2025-04-16
    provider: openai
    temperature: 0.4
    max_tokens: 15000
    cost_per_million_input_tokens: 10.0 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 40.0 # Placeholder cost ($/Million Tokens)
  - name: o4-mini-2025-04-16
    provider: openai
    temperature: 0.4
    max_tokens: 15000
    cost_per_million_input_tokens: 1.1 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 4.4 # Placeholder cost ($/Million Tokens)
  - name: o1-2024-12-17
    provider: openai
    temperature: 0.4
    max_tokens: 15000
    cost_per_million_input_tokens: 15.0 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 60.0 # Placeholder cost ($/Million Tokens)
  - name: gpt-4o-2024-08-06
    provider: openai
    temperature: 0.4
    max_tokens: 16000
    cost_per_million_input_tokens: 2.50 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 10.0 # Placeholder cost ($/Million Tokens)
  - name: o3-mini-2025-01-31
    provider: openai
    temperature: 0.4
    max_tokens: 15000
    cost_per_million_input_tokens: 1.1 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 4.4 # Placeholder cost ($/Million Tokens)
  - name: gpt-4.1-2025-04-14
    provider: openai
    temperature: 0.4
    max_tokens: 15000
    cost_per_million_input_tokens: 2.0 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 8.0 # Placeholder cost ($/Million Tokens)
  - name: gpt-4.1-mini-2025-04-14
    provider: openai
    temperature: 0.4
    max_tokens: 15000
    cost_per_million_input_tokens: 0.4 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 1.6 # Placeholder cost ($/Million Tokens)
  - name: gemini-2.5-pro-preview-03-25
    provider: google
    temperature: 0.4
    max_tokens: 15000
    cost_per_million_input_tokens: 1.25 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 10.0 # Placeholder cost ($/Million Tokens)
  - name: gemini-2.0-flash
    provider: google
    temperature: 0.4
    max_tokens: 15000
    cost_per_million_input_tokens: 0.1 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 0.4 # Placeholder cost ($/Million Tokens)
  - name: gemini-1.5-pro
    provider: google
    temperature: 0.4
    max_tokens: 15000
    cost_per_million_input_tokens: 1.25 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 5.0 # Placeholder cost ($/Million Tokens)
  - name: deepseek-reasoner
    provider: deepseek
    temperature: 0.4
    max_tokens: 8192
    cost_per_million_input_tokens: 0.55 # Placeholder cost ($/Million Tokens)
    cost_per_million_output_tokens: 2.19 # Placeholder cost ($/Million Tokens)
  - name: qwen3-8b # Example Qwen model
    provider: qwen
    temperature: 0.4 # Default temperature
    max_tokens: 8192 # Default max_tokens
    cost_per_million_input_tokens: 0.18 # Placeholder cost - please update
    cost_per_million_output_tokens: 2.1 # Placeholder cost - please update
    qwen_reasoning_enabled: true
    qwen_thinking_budget_tokens: 4000 # Example value, adjust as needed
  - name: qwen3-32b # Example Qwen model
    provider: qwen
    temperature: 0.4 # Default temperature
    max_tokens: 16384 # Default max_tokens
    cost_per_million_input_tokens: 0.7 # Placeholder cost - please update
    cost_per_million_output_tokens: 8.4 # Placeholder cost - please update
    qwen_reasoning_enabled: true
    qwen_thinking_budget_tokens: 4000 # Example value, adjust as needed
  - name: qwen3-235b-a22b # Example Qwen model
    provider: qwen
    temperature: 0.4 # Default temperature
    max_tokens: 16384 # Default max_tokens
    cost_per_million_input_tokens: 0.7 # Placeholder cost - please update
    cost_per_million_output_tokens: 8.4 # Placeholder cost - please update
    qwen_reasoning_enabled: true
    qwen_thinking_budget_tokens: 4000 # Example value, adjust as needed  
  - name: zoo-ml-text-to-cad
    provider: zoo_cli
    cost_per_minute: 0.50 # Placeholder cost
    free_tier_seconds: 10 # Placeholder value
    cli_args:
      output_format: stl
  
geometry_check:
  bounding_box_tolerance_mm: 1.0
  icp_fitness_threshold: 1.0
  chamfer_threshold_mm: 1.0
  hausdorff_threshold_mm: 1.0
  volume_threshold_percent: 2.0

evaluation:
  num_replicates: 1
